swagger: '2.0'
info:
  description: >-
    A RESTful API that provides access to versions of the USEEIO models. Results
    are returned as JSON objects.
  version: 1.0.2
  title: USEEIO-API
basePath: /api
externalDocs:
  description: The USEEIO API Wiki on github provides more information on using the API.
  url: 'https://github.com/USEPA/USEEIO_API/wiki/'
schemes:
  - http
paths:
  /models:
    get:
      summary: Get the available models from the server.
      produces:
        - application/json
      responses:
        '200':
          description: Successfully returned an array of model names.
          schema:
            type: array
            items:
              $ref: '#/definitions/Model'
  '/{model}/calculate':
    post:
      summary: Calculate the result for a given demand and perspective.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use
        - in: body
          name: body
          description: The demand vector and perspective for the calculation.
          schema:
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Successfully returned a calculation result.
          schema:
            $ref: '#/definitions/Result'
  '/{model}/demands':
    get:
      summary: Returns a list with all available demand vectors from a model
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned an array of available demand vectors.
          schema:
            type: array
            items:
              $ref: '#/definitions/DemandInfo'
  '/{model}/demands/{demandID}':
    get:
      summary: Returns a demand vector from the model
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
        - in: path
          name: demandID
          type: string
          required: true
          description: The ID of the demand vector.
      responses:
        '200':
          description: Successfully returned a demand vector for the given model.
          schema:
            type: array
            items:
              $ref: '#/definitions/DemandEntry'
  '/{model}/matrix/A':
    get:
      summary: Get the direct requirements matrix of the IO model.
      description: >
        The matrix `A` is a `sector x sector` matrix and contains in each column
        `i` the direct sector inputs that are required to produce 1 USD dollar
        of output from sector `i`.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned the direct requirements matrix for the given model.
          schema:
            type: array
            items:
              type: array
              items:
                type: number
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/B':
    get:
      summary: Get the satellite matrix of the IO model.
      description: >
        The satellite matrix `B` is an `elementary flow x sector` matrix and
        contains in each column `i` the amounts of emissions and resources -
        given in the reference units of the respective elementary flows - that
        are directly related to 1 USD output from sector `i`.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned the satellite matrix for the given model.
          schema:
            type: array
            items:
              type: array
              items:
                type: number
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/B_dqi':
    get:
      summary: Get the data quality entries of the satellite matrix.
      description: >
        The matrix `B_dqi` contains the corresponding data quality entries of
        the satellite matrix `B` in the same matrix dimensions of flows x sector.
        These entries are in the form of 5 data quality scores (values for each ranging from 1 to 5) for the five
        EPA LCA flow data quality indicators in this order: (Data reliability, Temporal correlation, Technological correlation,
         Technological correlation). For example '(3,1,1,4,5)'. For more information on the data quality indicators and score, see the US EPA 2016 Report
          'Guidance on Data Quality Assessment for Life Cycle Inventory Data'.

      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned the data quality entries for the satellite matrix for the given model.
          schema:
            type: array
            items:
              type: array
              items:
                type: string
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/C':
    get:
      summary: Get the characterization factors.
      description: >
        In the matrix `C`, each column `k` contains the characterization factors
        of the different LCIA categories related to one reference unit of flow
        `k`.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned the characterization factor matrix for the given model.
          schema:
            type: array
            items:
              type: array
              items:
                type: number
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/D':
    get:
      summary: Get the direct impact assessment results.
      description: >
        The matrix `D` contains in each column `i` the impact assessment result
        that is related to the direct emissions and resources for 1 USD output
        from sector `i`. From the matrices `B` and `C` the direct impact matrix
        can be calculated via: `D = C * B`
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned a matrix of direct impact results for the given model.
          schema:
            type: array
            items:
              type: array
              items:
                type: number
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/D_dqi':
    get:
      summary: Get the data quality results of the direct impact assessment results.
      description:
        The matrix `D_dqi` contains the corresponding data quality entries of
        the direct impact results matrix `D` in the same matrix dimensions of impacts x sector. These entries are in the form
        of 5 data quality scores (values for each ranging from 1 to 5) for the five EPA flow data quality
        indicators in this order, (Data reliability, Temporal correlation, Technological correlation,
       Technological correlation). For example '(3,1,1,4,5)'. For more information on the data quality indicators
        and scores, see the US EPA 2016 Report 'Guidance on Data Quality Assessment for Life Cycle Inventory Data'.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned a matrix of data quality entries for the direct impact results for the given model.
          schema:
            type: array
            items:
              type: array
              items:
                type: string
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/L':
    get:
      summary: Get the Leontief inverse of the IO model.
      description: >
        The Leontief inverse `L` is calculated via `L = (I - A)^-1`. `L` is also
        a `sector x sector` matrix and contains in each column `i` the total
        requirements of the respective sectors inputs to produce 1 USD of output
        from sector `i`.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned the Leontief inverse matrix of the given model.
          schema:
            type: array
            items:
              type: array
              items:
                type: number
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/U':
    get:
      summary: Get the total (direct+indirect) impact assessment results.
      description: >
        The matrix `U` is a `LCIA category x sector` matrix and contains in each
        column `i` the total impact assessment result related to the direct and
        indirect emissions and resources that are required to produce 1 USD
        output of sector `i`. With the direct impacts `D` and the total
        requirements `L` the matrix `U` can be calculated via `U = D * L`.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned the total impact results matrix.
          schema:
            type: array
            items:
              type: array
              items:
                type: number
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/U_dqi':
    get:
      summary: Get the data quality results of the total impact assessment results.
      description:
        The matrix `U_dqi` contains the corresponding data quality entries of
                the total impact results matrix `U` in the same matrix dimensions of impacts x sector. These entries are in the form
                of 5 data quality scores (values for each ranging from 1 to 5) for the five EPA flow data quality
                indicators in this order, (Data reliability, Temporal correlation, Technological correlation,
               Technological correlation). For example '(3,1,1,4,5)'. For more information on the data quality indicators
                and scores, see the US EPA 2016 Report 'Guidance on Data Quality Assessment for Life Cycle Inventory Data'.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned a matrix of data quality entries for the total impact results for the given model.
          schema:
            type: array
            items:
              type: array
              items:
                type: string
        '500':
          description: if the server failed to load the matrix file
  '/{model}/matrix/{name}':
    get:
      summary: Get a row or column of a matrix.
      description:
        Returns the row or column with the given index passed in the query parameter, from the given matrix. See the other matrix descriptions to understand. This function is currently only available for numeric matrices and not the data quality matrices, B_dqi, D_dqi, and U_dqi.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
        - in: path
          name: name
          type: string
          required: true
          description: The name of the matrix.
        - in: query
          name: col
          type: integer
          required: true
          description: The zero-based index of the column.
        - in: query
          name: row
          type: integer
          required: true
          description: The zero-based index of the row.
      responses:
        '200':
          description: Successfully returned an array for the given column or row of the given matrix and given model.
          schema:
            type: array
            items:
              type: number
        '400':
          description: if the column or row index is not a valid integer
        '500':
          description: if the server failed to load the matrix file or column
  '/{model}/sectors':
    get:
      summary: Get all sectors of the IO model.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the IO model to use.
      responses:
        '200':
          description: Successfully returned an array of sectors in the given model.
          schema:
            type: array
            items:
              $ref: '#/definitions/Sector'
  '/{model}/sectors/{sectorID}':
    get:
      summary: Get the information of the sector with the given ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
        - in: path
          name: sectorID
          type: string
          required: true
          description: The ID of the sector.
      responses:
        '200':
          description: Successfully returned an array with data on the given sector in the given model.
          schema:
            $ref: '#/definitions/Sector'
        '404':
          description: Sector not found.
  '/{model}/indicators':
    get:
      summary: Get all indicators of the model.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
      responses:
        '200':
          description: Successfully returned an array of indicators in the given model.
          schema:
            type: array
            items:
              $ref: '#/definitions/Indicator'
  '/{model}/indicators/{indicatorID}':
    get:
      summary: Get indicator information by ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: model
          type: string
          required: true
          description: The ID of the input-output model to use.
        - name: indicatorID
          in: path
          description: The ID of the indicator.
          required: true
          type: string
      responses:
        '200':
          description: Successfully returned an array with data on the given indicator in the given model.
          schema:
            $ref: '#/definitions/Indicator'
        '404':
          description: Indicator not found.
definitions:
  Model:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
  Sector:
    type: object
    properties:
      id:
        type: string
      index:
        type: integer
        description: The matrix index of the sector.
      name:
        type: string
        description: Display name of the sector.
      code:
        type: string
        description: Sector code in the underlying input-output model.
      location:
        type: string
        description: ID/code of the sector location.
  Indicator:
    type: object
    properties:
      id:
        type: string
      index:
        type: integer
        description: The matrix index of the indicator.
      name:
        type: string
        description: Display name of the indicator
      code:
        type: string
        description: >-
          3 or 4 letter indicator code which is also as label in the user
          interface
      unit:
        type: string
        description: The reference unit of the indicator.
  Demand:
    type: object
    properties:
      perspective:
        type: string
        enum:
          - direct
          - intermediate
          - final
      demand:
        type: array
        items:
          $ref: '#/definitions/DemandEntry'
  DemandEntry:
    type: object
    properties:
      sector:
        type: string
        description: The sector ID.
      amount:
        type: number
    example:
      sector: 112120/dairies/us
      amount: 42.42
  DemandInfo:
    type: object
    description: The meta information of a demand vector ...
    properties:
      id:
        type: string
      year:
        type: integer
  Result:
    type: object
    properties:
      indicators:
        type: array
        items:
          type: string
        description: List of indicator IDs (row index of the result matrix).
      sectors:
        type: array
        items:
          type: string
        description: List of sector IDs (column index of the result matrix).
      data:
        type: array
        items:
          type: array
          items:
            type: number
      totals:
        description: The result totals for the normalization.
        type: array
        items:
          type: number
